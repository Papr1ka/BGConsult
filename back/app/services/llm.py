from back.app.core.storage.qdrant import qdrant
from huggingface_hub import InferenceClient
from loguru import logger
from back.app.core.config import get_settings
from back.app.models.pdf import Game


class LLMService:
    def __init__(self):
        self.qdb = qdrant
        self.model_name = "mistralai/Mistral-7B-Instruct-v0.3"
        logger.debug(get_settings().hf_token)
        self.client = InferenceClient(token=get_settings().hf_token, provider="hf-inference")


    def answer(self, query, game_info: Game) -> str:
        context = self.qdb.get_relevant_context(query, game_info.file_name)
        logger.debug(f"LLM: Context: {context}")

        prompt = f"""–¢—ã ‚Äî —Å—Ç—Ä–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä–µ "{game_info.name}". 
        –¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å **—Ç–æ–ª—å–∫–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞** (—Ü–∏—Ç–∞—Ç–∞ –Ω–∏–∂–µ) –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å. 
        –ï—Å–ª–∏ –≤ —Ü–∏—Ç–∞—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ç—ã **–æ—Ç–∫–∞–∑—ã–≤–∞–µ—à—å—Å—è** –æ—Ç–≤–µ—á–∞—Ç—å.

        ‚ö†Ô∏è **–ù–µ –ø–∏—à–∏ –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è**, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–±–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç. 
        –ù–µ –ø—ã—Ç–∞–π—Å—è –¥–æ–¥—É–º—ã–≤–∞—Ç—å. –¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ —Ü–∏—Ç–∞—Ç–∞ —ç—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç.

        ---

        üìò –¶–ò–¢–ê–¢–ê –ò–ó –ü–†–ê–í–ò–õ:
        {context}

        ‚ùì –í–æ–ø—Ä–æ—Å:
        {query}

        üí¨ –û—Ç–≤–µ—Ç:
        """

        parameters = {
            "max_new_tokens": 256,
            "temperature": 0.1,
            "top_p": 0.9,
            "do_sample": False,
            "return_full_text": False
        }

        try:
            response = self.client.text_generation(prompt, model=self.model_name, **parameters)
        except Exception as e:
            logger.error(e)
            response = f"\n\n–¶–∏—Ç–∞—Ç–∞ –∏–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã:\n<blockquote>{game_info.url}</blockquote>"

        logger.debug(f"len(response): {len(response)}\n\nresponse: {response}")
        return response

    def add_pdf(self, pdf_file):
        self.qdb.create_qdrant_collection(pdf_file)

    
llm = LLMService()