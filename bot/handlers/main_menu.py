import logging

import aiohttp
from aiogram import Router, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from bot.create_bot import cfg, logger
from bot.keyboards.menu import get_main_keyboard, get_games_keyboard, get_back_to_games_button, get_grade_keyboard
from bot.db_service.db_manager import db

menu_router = Router()

async def get_current_dialog(input_obj):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è id —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –≤ –ë–î. –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –Ω–µ—Ç, —Ç–æ –æ–Ω —Å–æ–∑–¥–∞—ë—Ç—Å—è.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    username = input_obj.from_user.username
    user_id = input_obj.from_user.id
    
    dialog_id = await db.get_active_dialog_by_username(username)
    if not dialog_id:
        dialog_id = await db.start_dialog(user_id=user_id, user_name=username)
    
    return dialog_id

async def if_new_dialog_without_grade(input_obj, state: FSMContext):
    state = await state.get_state()
    if state == AskRules.waiting_for_grade:
        dialog_id = await get_current_dialog(input_obj)
        await db.end_dialog(dialog_id)


class AskRules(StatesGroup):
    """
    –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∞–≤–∏–ª –∏–≥—Ä—ã.

    Attributes:
        choosing_game (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –∏–≥—Ä—É.
        waiting_for_question (State): –°–æ—Å—Ç–æ—è–Ω–∏–µ, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å.
    """
    choosing_game = State()
    waiting_for_question = State()
    waiting_for_grade = State()

@menu_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await if_new_dialog_without_grade(message, state)
    dialog_id = await get_current_dialog(message)

    await db.add_message(dialog_id, message.text, True)

    answer = "–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã–º –∏–≥—Ä–∞–º."
    await db.add_message(dialog_id, answer, False)

    await state.clear()
    await message.answer(answer, reply_markup=get_main_keyboard())

@menu_router.message(F.text == "üé≤ –°–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ –ø—Ä–∞–≤–∏–ª–∞")
@menu_router.message(F.text == "üîÅ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É")
async def show_game_list(message: Message, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await if_new_dialog_without_grade(message, state)

    dialog_id = await get_current_dialog(message)
    await db.add_message(dialog_id, message.text, True)

    answer = "–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:"
    await db.add_message(dialog_id, answer, False)

    await state.set_state(AskRules.choosing_game)
    await message.answer(answer, reply_markup=get_games_keyboard())

@menu_router.message(F.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def close_dialog(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    dialog_id = await get_current_dialog(message)
    await db.add_message(dialog_id, message.text, True)

    answer = "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"
    await db.add_message(dialog_id, answer, False)

    await state.set_state(AskRules.waiting_for_grade)
    await message.answer(answer, reply_markup=get_grade_keyboard())

@menu_router.callback_query(F.data.startswith("game_"))
async def handle_game_choice(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await if_new_dialog_without_grade(callback, state)
    game = callback.data.removeprefix("game_")

    dialog_id = await get_current_dialog(callback)
    await db.add_message(dialog_id, game, True)

    await state.update_data(game=game)
    await state.set_state(AskRules.waiting_for_question)

    answer = f"–¢—ã –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É: <b>{game}</b>.\n\n–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º."
    await db.add_message(dialog_id, answer, False)

    await callback.message.answer(
        answer,
        reply_markup=get_back_to_games_button()
    )
    await callback.answer()

@menu_router.callback_query(F.data.startswith("grade_"), AskRules.waiting_for_grade)
async def handle_game_choice(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    grade = int(callback.data.removeprefix("grade_"))

    dialog_id = await get_current_dialog(callback)
    await db.add_message(dialog_id, str(grade), True)

    answer = f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}."

    await db.add_message(dialog_id, answer, False)
    await db.add_rating(dialog_id, grade)
    await db.end_dialog(dialog_id)

    await state.set_state(AskRules.waiting_for_question)
    await callback.message.answer(
        f"–í—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {grade}.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@menu_router.callback_query(F.data.startswith("grade_"))
async def handle_game_choice(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ü–µ–Ω–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ —Å—Ü–µ–Ω–∞—Ä–∏—é –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞.

    Args:
        callback (CallbackQuery): –û–±—ä–µ–∫—Ç callback-–∑–∞–ø—Ä–æ—Å–∞ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await if_new_dialog_without_grade(callback, state)
    dialog_id = await get_current_dialog(callback)
    await db.add_message(dialog_id, callback.message.text, True)

    answer = f"–í—ã –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –¥–∏–∞–ª–æ–≥"
    await db.add_message(dialog_id, answer, False)

    await callback.message.answer(
        answer,
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@menu_router.message(AskRules.waiting_for_question)
async def handle_question(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –±—ç–∫–µ–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞.

    Args:
        message (Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    dialog_id = await get_current_dialog(message)
    await db.add_message(dialog_id, message.text, True)

    data = await state.get_data()
    game = data.get("game")
    question = message.text

    # –ó–∞–ø—Ä–æ—Å –∫ –±—ç–∫–µ–Ω–¥—É
    async with aiohttp.ClientSession() as session:
        try:
            logger.log(logging.INFO, f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å: {cfg.api_url}/get_answer/ —Å –¥–∞–Ω–Ω—ã–º–∏ {game}, {question}")
            async with session.post(f"{cfg.api_url}/get_answer/",
                                    json={"game_name": game, "question": question}) as resp:
                if resp.status == 200:
                    answer = (await resp.json()).get("answer", "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                else:
                    answer = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –°—Ç–∞—Ç—É—Å: {resp.status}"
        except Exception as e:
            logger.log(logging.ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}")

            answer = "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"

    answer = f"<b>–û—Ç–≤–µ—Ç –ø–æ –∏–≥—Ä–µ {game}:</b>\n\n{answer}"
    await db.add_message(dialog_id, answer, False)
    await message.answer(answer)
